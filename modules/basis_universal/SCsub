#!/usr/bin/env python
import string

Import('env')
Import('env_modules')

env_bu = env_modules.Clone()
env_bu.Append(CPPPATH=["#thirdparty/basis_universal", "#thirdparty/basis_universal/transcoder"])

if env['target'] == "debug":
	env_bu.Append(CPPFLAGS=["-DBASISU_DEVEL_MESSAGES=1", "-DBASISD_ENABLE_DEBUG_FLAGS=1"])

tool_sources = string.split("""
	#thirdparty/basis_universal/basisu_astc_decomp.cpp
	#thirdparty/basis_universal/basisu_backend.cpp
	#thirdparty/basis_universal/basisu_basis_file.cpp
	#thirdparty/basis_universal/basisu_comp.cpp
	#thirdparty/basis_universal/basisu_enc.cpp
	#thirdparty/basis_universal/basisu_etc.cpp
	#thirdparty/basis_universal/basisu_frontend.cpp
	#thirdparty/basis_universal/basisu_global_selector_palette_helpers.cpp
	#thirdparty/basis_universal/basisu_gpu_texture.cpp
	#thirdparty/basis_universal/basisu_pvrtc1_4.cpp
	#thirdparty/basis_universal/basisu_resample_filters.cpp
	#thirdparty/basis_universal/basisu_resampler.cpp
	#thirdparty/basis_universal/basisu_ssim.cpp
	#thirdparty/basis_universal/basisu_tool.cpp
	#thirdparty/basis_universal/lodepng.cpp
	""")

transcoder_sources = ["#thirdparty/basis_universal/transcoder/basisu_transcoder.cpp"]

if env['tools']:
	env_bu.add_source_files(env.modules_sources, tool_sources)

env_bu.add_source_files(env.modules_sources, transcoder_sources)

env_bu.add_source_files(env.modules_sources, "*.cpp")
